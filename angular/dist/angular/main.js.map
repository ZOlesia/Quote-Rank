{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/all/all.component.css","webpack:///./src/app/all/all.component.html","webpack:///./src/app/all/all.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/http.service.ts","webpack:///./src/app/new-quote/new-quote.component.css","webpack:///./src/app/new-quote/new-quote.component.html","webpack:///./src/app/new-quote/new-quote.component.ts","webpack:///./src/app/new/new.component.css","webpack:///./src/app/new/new.component.html","webpack:///./src/app/new/new.component.ts","webpack:///./src/app/quotes/quotes.component.css","webpack:///./src/app/quotes/quotes.component.html","webpack:///./src/app/quotes/quotes.component.ts","webpack:///./src/app/update/update.component.css","webpack:///./src/app/update/update.component.html","webpack:///./src/app/update/update.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\n  <p class=\\\"font-italic\\\" >We have quotes by: </p>\\n  \\n  <table class=\\\"table table-striped text-center\\\">\\n    <thead class=\\\"thead-dark\\\">\\n      <tr>\\n        <th>Authors</th>\\n        <th>Actions Available</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor = \\\"let a of allAuthors\\\">\\n        <td>{{a.name}}</td>\\n        <td>\\n          <button routerLink = '/writers/quotes/{{a._id}}' class=\\\"btn btn-warning\\\" style=\\\"margin-right: 5px;\\\">View Quotes</button>\\n          <button routerLink = '/writers/edit/{{a._id}}' class=\\\"btn btn-success\\\" style=\\\"margin-right: 5px;\\\">Edit</button>\\n          <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteAuthor(a._id)\\\">Delete</button>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <button [routerLink] = \\\"['/writers/new']\\\" class=\\\"btn btn-outline-info float-right\\\">Add an Author</button>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\n\n\n@Component({\n  selector: 'app-all',\n  templateUrl: './all.component.html',\n  styleUrls: ['./all.component.css']\n})\nexport class AllComponent implements OnInit {\n  allAuthors: any;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    ){}\n  ngOnInit() {\n    this.showAll();\n  }\n\n  showAll(){\n    let observable = this._httpService.showAuthors();\n    observable.subscribe(data => {\n      console.log(data);\n      this.allAuthors = data['authors'];\n    }) \n  }\n\n  deleteAuthor(id: string){\n    let observable = this._httpService.deleteOneAuthor(id);\n    observable.subscribe(data => {\n      console.log(data);\n      this.showAll();\n    })\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NewComponent } from './new/new.component';\nimport { UpdateComponent } from './update/update.component';\nimport { AllComponent } from './all/all.component';\nimport { QuotesComponent } from './quotes/quotes.component';\nimport { NewQuoteComponent } from './new-quote/new-quote.component';\n\n\nconst routes: Routes = [\n  {path: 'writers/new', component: NewComponent},\n  {path: 'writers/edit/:id', component: UpdateComponent},\n  {path: 'writers', component: AllComponent},\n  {path: '', pathMatch: 'full', redirectTo: '/writers'},\n  {path: 'writers/quotes/:id', component: QuotesComponent},\n  {path: 'writers/quotes/new/:id', component: NewQuoteComponent}\n  // {path: '**', component: AllComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <h1 class=\\\"text-right font-italic\\\" style=\\\"margin-right: 150px;\\\">Favorite Authors</h1>\\n    <router-outlet></router-outlet>\\n</div>\\n\"","import { Component, OnInit  } from '@angular/core'; //Anything  we want the component to do when it is initialized should go in the ngOnInit method.\nimport { HttpService } from './http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    // private _httpService: HttpService,\n      //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n  ){}\n\n  ngOnInit(){}\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpService } from './http.service'; //register service\nimport { HttpClientModule } from '@angular/common/http';\nimport { AllComponent } from './all/all.component';\nimport { UpdateComponent } from './update/update.component';\nimport { NewComponent } from './new/new.component';\nimport { QuotesComponent } from './quotes/quotes.component';\nimport { NewQuoteComponent } from './new-quote/new-quote.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AllComponent,\n    UpdateComponent,\n    NewComponent,\n    QuotesComponent,\n    NewQuoteComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule, //to fetch the data???\n    FormsModule, AppRoutingModule // <-- register FormsModule with our app.\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'; //Dependency injection\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private _http: HttpClient) { }  //Dependency injection\n\n  showAuthors(){\n    return this._http.get('/authors');\n  }\n\n  addAuthor(newAuthor){\n    return this._http.post('/authors', newAuthor);\n  }\n  \n  showOne(id){\n    return this._http.get('/authors/' + id);\n  }\n\n  editAuthor(updateAuthor, id){\n    return this._http.put('/authors/' + id, updateAuthor);\n  }\n\n  deleteOneAuthor(id){\n    return this._http.delete('/authors/' + id);\n  }\n\n  addQuote(id, newQuote){\n    return this._http.post('authors/' + id + '/quotes', newQuote);\n  }\n\n  voteQuote(id, vote){\n    return this._http.put('/authors/quotes/' + id, vote);\n  }\n\n  removeQuote(id){\n    return this._http.delete('/authors/quotes/' + id);\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n\\n<form (submit)=\\\"addNewQuote()\\\" class=\\\"bg-light  mx-auto border border-info\\\" style=\\\"height: 400px; width: 400px;\\\">\\n    <a href=\\\"\\\" [routerLink] = \\\"['/writers']\\\" class=\\\"float-right\\\" style = \\\"margin: 5px;\\\">Home</a>\\n    <p style=\\\"margin: 75px 0 0 125px\\\" *ngIf=\\\"author\\\">Provide new Quote by {{author.name}}: </p>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"newQuote.content\\\">Content</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"newQuote.content\\\" placeholder=\\\"Content..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"newQuote.content\\\" #content=\\\"ngModel\\\">\\n  </div>\\n  <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n  <div *ngIf=\\\"content.invalid && (content.dirty || !content.untouched)\\\"\\n  class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"content.errors.required\\\">\\n    Quote is required.\\n    </div>\\n    <div *ngIf=\\\"content.errors.minlength\\\">\\n    Quote must be at least 3 characters long.\\n    </div>\\n  </div>\\n  <input type=\\\"submit\\\" value=\\\"Add\\\" class=\\\"btn btn-success\\\" style=\\\"margin: 50px 20px 0px 130px;\\\" [disabled]=\\\"!content.valid\\\">\\n  <button routerLink = '/writers/quotes/{{authorId}}' class=\\\"btn btn-primary\\\" style=\\\"margin-top: 50px;\\\">Cancel</button>\\n</form>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n\n\n@Component({\n  selector: 'app-new-quote',\n  templateUrl: './new-quote.component.html',\n  styleUrls: ['./new-quote.component.css']\n})\nexport class NewQuoteComponent implements OnInit {\n  authorId: string;\n  newQuote: any;\n  author: any;\n  err: string;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){    }\n\n  ngOnInit() {\n    this._route.params.subscribe((params: Params) => {\n      this.authorId = params['id'];\n    })\n    this.showAuthor(this.authorId);\n    this.newQuote = {content: \"\"}\n  }\n  \n  showAuthor(id){\n    let observable = this._httpService.showOne(this.authorId);\n    observable.subscribe(data => {\n      console.log(data);\n      this.author =  data['author'];\n      console.log(\"**********\", this.author);\n    })\n  }\n\n  addNewQuote(id){\n    let observable = this._httpService.addQuote(this.authorId, this.newQuote);\n    observable.subscribe(data => {\n      if(data['err']){\n        console.log(data['err'].errors.content.message);\n        this.err = data['err'].errors.content.message;\n        this._router.navigate(['/writers/quotes/new/' + this.authorId]);\n      } else{\n          console.log('AUTHORS ID IS HERE ', this.authorId);\n          console.log('NEW QUOTE IS HERE', data);\n          this.newQuote = {content: \"\"};\n          this._router.navigate(['/writers/quotes/' + this.authorId]);\n      }\n    })\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n\\n<form (submit)=\\\"createAuthor()\\\" class=\\\"bg-light  mx-auto border border-info\\\" style=\\\"height: 400px; width: 400px;\\\">\\n    <a href=\\\"\\\" [routerLink] = \\\"['/writers']\\\" class=\\\"float-right\\\" style = \\\"margin: 5px;\\\">Home</a>\\n    <p style=\\\"margin: 75px 0 0 125px\\\">Add a new Author: </p>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"newAuthor.name\\\">Name</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"newAuthor.name\\\" placeholder=\\\"Name..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"newAuthor.name\\\" #name=\\\"ngModel\\\">\\n  </div>\\n  <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n  <div *ngIf=\\\"name.invalid && (name.dirty || !name.untouched)\\\"\\n  class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"name.errors.required\\\">\\n    Name is required.\\n    </div>\\n    <div *ngIf=\\\"name.errors.minlength\\\">\\n    Name must be at least 3 characters long.\\n    </div>\\n  </div>\\n  <input type=\\\"submit\\\" value=\\\"Add\\\" class=\\\"btn btn-success\\\" style=\\\"margin: 50px 20px 0px 130px;\\\" [disabled]=\\\"!name.valid\\\">\\n  <button [routerLink] = \\\"['/writers']\\\" class=\\\"btn btn-primary\\\" style=\\\"margin-top: 50px;\\\">Cancel</button>\\n</form>\\n\\n\\n \\n      \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n\n@Component({\n  selector: 'app-new',\n  templateUrl: './new.component.html',\n  styleUrls: ['./new.component.css']\n})\nexport class NewComponent implements OnInit {\n  newAuthor: any;\n  err: string;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){}\n\n  ngOnInit() {\n    this.newAuthor = {name: \"\"};\n  }\n\n  createAuthor(){\n\n      let observable = this._httpService.addAuthor(this.newAuthor);\n      observable.subscribe(data => {\n        console.log(data);\n        if(!data['err']){\n          this.newAuthor = {name: \"\"};\n          this._router.navigate(['/writers']);\n        } else{\n          this.err = data['err'].errors.name.message;\n          this._router.navigate(['/writers/new']);\n        }\n      });\n  }\n\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div *ngIf = \\\"selectedAuthor\\\">\\n  <p class=\\\"font-italic\\\" >Quotes by {{selectedAuthor.name}}: </p>\\n  <table class=\\\"table table-striped text-center\\\">\\n    <thead class=\\\"thead-dark\\\">\\n      <tr>\\n        <th>Quote</th>\\n        <th>Votes</th>\\n        <th>Actions Available</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor = \\\"let quote of selectedAuthor.quotes\\\">\\n        <td>{{quote.content}}</td>\\n        <td>{{quote.vote}}</td>\\n        <td>\\n          <button class=\\\"btn btn-warning\\\" style=\\\"margin-right: 5px;\\\" (click) = \\\"voteUp(quote._id)\\\">Vote Up</button>\\n          <button class=\\\"btn btn-success\\\" style=\\\"margin-right: 5px;\\\" (click) = \\\"voteDown(quote._id)\\\">Vote Down</button>\\n          <button class=\\\"btn btn-danger\\\" (click) = \\\"deleteThisQuote(quote._id)\\\">Delete</button>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <button [routerLink] = \\\"['/writers']\\\" class=\\\"btn btn-outline-secondary\\\">Home</button>\\n  <button class=\\\"btn btn-outline-info float-right\\\" routerLink = '/writers/quotes/new/{{selectedAuthor._id}}'>Add new Quote</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n@Component({\n  selector: 'app-quotes',\n  templateUrl: './quotes.component.html',\n  styleUrls: ['./quotes.component.css']\n})\nexport class QuotesComponent implements OnInit {\n  authorId: string;\n  selectedAuthor: any;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){    }\n\n  ngOnInit() {\n    this._route.params.subscribe((params: Params) => {\n      this.authorId = params['id'];\n    })\n    this.showSelectedAuthor(this.authorId);\n  }\n\n  showSelectedAuthor(id){\n    let observable = this._httpService.showOne(this.authorId);\n    observable.subscribe( data => {\n      console.log(data);\n      this.selectedAuthor = data['author'];\n      console.log('***** author is here', this.selectedAuthor);\n    })\n  }\n\n  voteUp(id){\n    let observable = this._httpService.voteQuote(this.authorId, {_id: id, voteVal: 1});\n    observable.subscribe(data => {\n      console.log(data);\n      this.showSelectedAuthor(this.authorId);\n    })\n  }\n\n  voteDown(id){\n    let observable = this._httpService.voteQuote(this.authorId, {_id: id, voteVal: -1});\n    observable.subscribe(data => {\n      console.log(data);\n      this.showSelectedAuthor(this.authorId);\n    })\n  }\n\n  deleteThisQuote(id){\n    let observable = this._httpService.removeQuote(id);\n    observable.subscribe(data => {\n      console.log(data);\n      this.showSelectedAuthor(this.authorId);\n    })\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n\\n  <!-- <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n  <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\"\\n  class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"name.errors.required\\\">\\n    Name is required.\\n    </div>\\n    <div *ngIf=\\\"name.errors.minlength\\\">\\n    Name must be at least 3 characters long.\\n    </div>\\n  </div> -->\\n \\n\\n\\n<form (submit) = \\\"editOneAuthor(updateAuthor._id)\\\" class=\\\"bg-light  mx-auto border border-info\\\" style=\\\"height: 400px; width: 400px;\\\">\\n    <a href=\\\"\\\" [routerLink] = \\\"['/writers']\\\" class=\\\"float-right\\\" style = \\\"margin: 5px;\\\">Home</a>\\n    <p style=\\\"margin: 75px 0 0 125px\\\">Edit this Author: </p>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"updateAuthor.name\\\">Name</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"updateAuthor.name\\\" placeholder=\\\"Name..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"updateAuthor.name\\\" #name=\\\"ngModel\\\">\\n  </div>\\n  <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n  <div *ngIf=\\\"name.invalid && (name.dirty || !name.untouched)\\\"\\n  class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"name.errors.required\\\">\\n    Name is required.\\n    </div>\\n    <div *ngIf=\\\"name.errors.minlength\\\">\\n    Name must be at least 3 characters long.\\n    </div>\\n  </div>\\n  <input type=\\\"submit\\\" value=\\\"Edit\\\" class=\\\"btn btn-success\\\" style=\\\"margin: 50px 20px 0px 130px;\\\">\\n  <button [routerLink] = \\\"['/writers']\\\" class=\\\"btn btn-primary\\\" style=\\\"margin-top: 50px;\\\">Cancel</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n@Component({\n  selector: 'app-update',\n  templateUrl: './update.component.html',\n  styleUrls: ['./update.component.css']\n})\nexport class UpdateComponent implements OnInit {\n  updateAuthorId: any;\n  updateAuthor: any;\n  err: string;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){    }\n\n  ngOnInit() {\n    this._route.params.subscribe((params: Params) => {\n      this.updateAuthorId = params['id']; \n    })\n    this.showAuthor(this.updateAuthorId);\n    this.updateAuthor = {name: \"\"};\n}\n\n  showAuthor(id){\n    let observable = this._httpService.showOne(this.updateAuthorId);\n    observable.subscribe(data => {\n      console.log(data);\n      this.updateAuthor =  data['author'];\n      console.log(\"**********\", this.updateAuthor);\n    })\n  }\n\n  editOneAuthor(id){\n    let observable = this._httpService.editAuthor(this.updateAuthor, this.updateAuthorId);\n    observable.subscribe(data => {\n      console.log(data);\n      if(!data['err']){\n        this._router.navigate(['/writers']);\n      } else{\n        console.log('YEAAAAAHH ERROR');\n        this.err = data['err'].errors.name.message;\n        this._router.navigate(['/writers/edit/' + this.updateAuthorId]);\n      }\n      \n    })\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}